
LedBoardTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000890  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000232  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 1;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	8a b9       	out	0x0a, r24	; 10
	
	void rolluikOmlaag() {
		PORTD &= ~(1 << PIND3); //LOW
  84:	5b 98       	cbi	0x0b, 3	; 11
  86:	8a e0       	ldi	r24, 0x0A	; 10
  88:	90 e0       	ldi	r25, 0x00	; 0
		for(int i=0; i<10; i++) {
			PORTD |= (1 << PIND4); //HIGH
  8a:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	39 e6       	ldi	r19, 0x69	; 105
  90:	48 e1       	ldi	r20, 0x18	; 24
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
			_delay_ms(500);
			PORTD &= ~(1 << PIND4); //LOW
  9e:	5c 98       	cbi	0x0b, 4	; 11
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	39 e6       	ldi	r19, 0x69	; 105
  a4:	48 e1       	ldi	r20, 0x18	; 24
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
  b2:	01 97       	sbiw	r24, 0x01	; 1
{
	DDRD = 1;
	
	void rolluikOmlaag() {
		PORTD &= ~(1 << PIND3); //LOW
		for(int i=0; i<10; i++) {
  b4:	51 f7       	brne	.-44     	; 0x8a <main+0xa>
			PORTD |= (1 << PIND4); //HIGH
			_delay_ms(500);
			PORTD &= ~(1 << PIND4); //LOW
			_delay_ms(500);
		}
		PORTD |= (1 << PIND5); //HIGH
  b6:	5d 9a       	sbi	0x0b, 5	; 11
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	93 e2       	ldi	r25, 0x23	; 35
  bc:	24 ef       	ldi	r18, 0xF4	; 244
  be:	81 50       	subi	r24, 0x01	; 1
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	20 40       	sbci	r18, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
		_delay_ms(5000);
	}
	
	void rolluikOmhoog() {
		PORTD &= ~(1 << PIND5); //LOW
  ca:	5d 98       	cbi	0x0b, 5	; 11
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	90 e0       	ldi	r25, 0x00	; 0
		for(int i=0; i<10; i++) {
			PORTD |= (1 << PIND4); //HIGH
  d0:	5c 9a       	sbi	0x0b, 4	; 11
  d2:	3f ef       	ldi	r19, 0xFF	; 255
  d4:	49 e6       	ldi	r20, 0x69	; 105
  d6:	28 e1       	ldi	r18, 0x18	; 24
  d8:	31 50       	subi	r19, 0x01	; 1
  da:	40 40       	sbci	r20, 0x00	; 0
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
			_delay_ms(500);
			PORTD &= ~(1 << PIND4); //LOW
  e4:	5c 98       	cbi	0x0b, 4	; 11
  e6:	3f ef       	ldi	r19, 0xFF	; 255
  e8:	49 e6       	ldi	r20, 0x69	; 105
  ea:	28 e1       	ldi	r18, 0x18	; 24
  ec:	31 50       	subi	r19, 0x01	; 1
  ee:	40 40       	sbci	r20, 0x00	; 0
  f0:	20 40       	sbci	r18, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
  f8:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(5000);
	}
	
	void rolluikOmhoog() {
		PORTD &= ~(1 << PIND5); //LOW
		for(int i=0; i<10; i++) {
  fa:	51 f7       	brne	.-44     	; 0xd0 <main+0x50>
			PORTD |= (1 << PIND4); //HIGH
			_delay_ms(500);
			PORTD &= ~(1 << PIND4); //LOW
			_delay_ms(500);
		}
		PORTD |= (1 << PIND3); //HIGH
  fc:	5b 9a       	sbi	0x0b, 3	; 11
  fe:	3f ef       	ldi	r19, 0xFF	; 255
 100:	43 e2       	ldi	r20, 0x23	; 35
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	31 50       	subi	r19, 0x01	; 1
 106:	40 40       	sbci	r20, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x84>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x8e>
 10e:	00 00       	nop
 110:	b9 cf       	rjmp	.-142    	; 0x84 <main+0x4>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
